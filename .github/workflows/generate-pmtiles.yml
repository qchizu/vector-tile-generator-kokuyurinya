name: Generate PMTiles

on:
  push:
    paths:
      - 'data/source/**'
      - 'config/**'
  workflow_dispatch:
    inputs:
      experiment_name:
        description: 'Name for this experimental configuration'
        required: false
        type: string
      production_release:
        description: 'Mark this as a production release'
        required: false
        type: boolean
        default: false
      version_tag:
        description: 'Version tag for production release (e.g., v1.0.0)'
        required: false
        type: string

env:
  TIMESTAMP: $(date +'%Y%m%d_%H%M%S')

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup GDAL
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin

      - name: Setup tippecanoe
        run: |
          git clone https://github.com/felt/tippecanoe.git
          cd tippecanoe
          make -j
          sudo make install

      - name: Create directory structure
        run: |
          mkdir -p data/processed
          mkdir -p experiments
          mkdir -p production/releases
          mkdir -p _site/tiles/{experiments,releases}

      - name: Save current configuration
        run: |
          CONFIG_DIR="config/$([ -n "${{ github.event.inputs.experiment_name }}" ] && echo "experiments/${{ github.event.inputs.experiment_name }}" || echo "latest")"
          mkdir -p $CONFIG_DIR
          cp .github/workflows/generate-pmtiles.yml $CONFIG_DIR/
          echo "CONFIG_DIR=$CONFIG_DIR" >> $GITHUB_ENV

      - name: Merge GeoJSON files
        run: |
          python3 $(which ogrmerge.py) -single \
            -o data/processed/merged.geojson \
            data/source/*.geojson || echo "No source files found"

      - name: Generate detail layer
        run: |
          tippecanoe -o data/processed/detail.mbtiles \
            -z14 -Z14 \
            --no-tile-size-limit --no-feature-limit \
            -l detail \
            data/processed/merged.geojson

      - name: Generate kokuyurinmeisho layer
        run: |
          ogr2ogr -f FlatGeobuf \
            data/processed/merged_kokuyurinmeisho_dissolved.fgb \
            data/processed/merged.geojson \
            -dialect sqlite \
            -sql "SELECT ST_Union(geometry) as geometry, A45_013, A45_024 FROM merged GROUP BY A45_013, A45_024"

          tippecanoe -o data/processed/kokuyurinmeisho.mbtiles \
            -z13 -Z10 \
            --no-tile-size-limit --no-feature-limit \
            -l kokuyurinmeisho \
            --no-simplification-of-shared-nodes \
            --detect-shared-borders \
            data/processed/merged_kokuyurinmeisho_dissolved.fgb

      - name: Generate keikakukumeisho layer
        run: |
          ogr2ogr -f FlatGeobuf \
            data/processed/merged_keikakukumeisho_dissolved.fgb \
            data/processed/merged.geojson \
            -dialect sqlite \
            -sql "SELECT ST_Union(geometry) as geometry, A45_024 FROM merged GROUP BY A45_024"

          tippecanoe -o data/processed/keikakukumeisho.mbtiles \
            -z9 -Z2 \
            --no-tile-size-limit --no-feature-limit \
            -l keikakukumeisho \
            --no-simplification-of-shared-nodes \
            --detect-shared-borders \
            data/processed/merged_keikakukumeisho_dissolved.fgb

      - name: Set timestamp
        run: |
          echo "TIMESTAMP=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV

      - name: Join tiles and generate PMTiles
        run: |
          OUTPUT_NAME="kokuyurinya_${{ env.TIMESTAMP }}.pmtiles"
          WORKFLOW_CONFIG_NAME="generate-pmtiles_${{ env.TIMESTAMP }}.yml"
          
          tile-join -o "data/processed/$OUTPUT_NAME" \
            -n "国土数値情報 国有林野データ" \
            -A "<a href='https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-A45.html'>国土数値情報 国有林野データ</a>" \
            --overzoom \
            --no-tile-size-limit \
            data/processed/detail.mbtiles \
            data/processed/kokuyurinmeisho.mbtiles \
            data/processed/keikakukumeisho.mbtiles

          # YAMLファイルをコピー
          cp .github/workflows/generate-pmtiles.yml "data/processed/$WORKFLOW_CONFIG_NAME"

          # 実験用または本番用のディレクトリにコピー
          if [ "${{ github.event.inputs.experiment_name }}" != "" ]; then
            OUTPUT_DIR="experiments/${{ github.event.inputs.experiment_name }}/${{ env.TIMESTAMP }}"
            mkdir -p "$OUTPUT_DIR"
            cp "data/processed/$OUTPUT_NAME" "$OUTPUT_DIR/"
            cp "data/processed/$WORKFLOW_CONFIG_NAME" "$OUTPUT_DIR/"
            
            # GitHub Pages用のコピー
            mkdir -p "_site/tiles/experiments/${{ github.event.inputs.experiment_name }}"
            cp "data/processed/$OUTPUT_NAME" "_site/tiles/experiments/${{ github.event.inputs.experiment_name }}/"
            cp "data/processed/$WORKFLOW_CONFIG_NAME" "_site/tiles/experiments/${{ github.event.inputs.experiment_name }}/"
          elif [ "${{ github.event.inputs.production_release }}" = "true" ]; then
            OUTPUT_DIR="production/releases/${{ env.TIMESTAMP }}"
            mkdir -p "$OUTPUT_DIR"
            cp "data/processed/$OUTPUT_NAME" "$OUTPUT_DIR/"
            cp "data/processed/$WORKFLOW_CONFIG_NAME" "$OUTPUT_DIR/"
            
            # GitHub Pages用のコピー
            mkdir -p "_site/tiles/releases"
            cp "data/processed/$OUTPUT_NAME" "_site/tiles/releases/"
            cp "data/processed/$WORKFLOW_CONFIG_NAME" "_site/tiles/releases/"
            
            # 最新版のシンボリックリンク作成
            ln -sf "releases/${{ env.TIMESTAMP }}/$OUTPUT_NAME" "production/latest.pmtiles"
            cp "data/processed/$OUTPUT_NAME" "_site/tiles/latest.pmtiles"
          fi

      - name: Create version.json
        if: github.event.inputs.production_release == 'true'
        run: |
          cat > _site/tiles/version.json << EOF
          {
            "version": "${{ github.event.inputs.version_tag }}",
            "timestamp": "$TIMESTAMP",
            "filename": "kokuyurinya_${TIMESTAMP}.pmtiles",
            "config_path": "${{ env.CONFIG_DIR }}"
          }
          EOF

      - name: Generate index page
        run: |
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>PMTiles Hosting</title>
          </head>
          <body>
            <h1>PMTiles Hosting</h1>
            <h2>Latest Production Release</h2>
            <p>URL: <code>https://[username].github.io/[repo]/tiles/latest.pmtiles</code></p>
            
            <h2>All Releases</h2>
            <p>Directory: <code>https://[username].github.io/[repo]/tiles/releases/</code></p>
            
            <h2>Experiments</h2>
            <p>Directory: <code>https://[username].github.io/[repo]/tiles/experiments/</code></p>
            
            <h2>Version Info</h2>
            <p>JSON: <code>https://[username].github.io/[repo]/tiles/version.json</code></p>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add config/
          git add experiments/
          git add production/
          
          if [ "${{ github.event.inputs.production_release }}" = "true" ]; then
            git tag "${{ github.event.inputs.version_tag }}"
          fi
          
          COMMIT_MSG="Update PMTiles and configurations

          ${TIMESTAMP}
          Configuration: ${{ env.CONFIG_DIR }}"
          
          if [ "${{ github.event.inputs.production_release }}" = "true" ]; then
            COMMIT_MSG="${COMMIT_MSG}
          Production Release: ${{ github.event.inputs.version_tag }}"
          fi
          
          git commit -m "${COMMIT_MSG}" || echo "No changes to commit"
          
          git push --tags || echo "No tags to push"
          git push || echo "No changes to push"
